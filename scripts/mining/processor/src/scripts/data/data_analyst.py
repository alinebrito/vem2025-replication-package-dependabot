import pandas as pd
from datetime import datetime, timedelta, timezone
import matplotlib.pyplot as plt


def convert_datetime_columns(df):
    datetime_columns = [
        'CreatedAt', 'ClosedAt', 'UpdatedAt',
        'PublishedAt', 'MergedAt', 'LastEditedAt'
    ]
    for column in datetime_columns:
        df[column] = pd.to_datetime(df[column], errors='coerce')
    return df


def difference_in_hours(datetime1, datetime2):
    dt1 = pd.to_datetime(datetime1)
    dt2 = pd.to_datetime(datetime2)
    return abs(dt1 - dt2)


def percent_recent_dependabot_prs(df):
    """Percentage of analysed repositories that have at least 1 PR generated by Dependabot in the last 120 days"""
    limit_date = datetime.now(timezone.utc) - timedelta(days=120)

    filtered_repos = df[
        (df['Author'] == 'dependabot') &
        (df['CreatedAt'].notna()) &
        (df['CreatedAt'] >= pd.to_datetime(limit_date))
    ]

    total_repos = df['RepositoryId'].nunique()
    percent = (filtered_repos['RepositoryId'].nunique() / total_repos) * 100

    # Generate pie chart
    labels = ['Recent Dependabot PRs', 'Other PRs']
    sizes = [percent, 100 - percent]
    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    plt.title("Proportion of Repositories with Recent Dependabot PRs (Last 120 days)")
    plt.show()

    return percent


def percent_old_dependabot_prs(df):
    """Percentage of repositories that have at least 1 PR by Dependabot but no new PR in the last 120 days"""
    limit_date = datetime.now(timezone.utc) - timedelta(days=120)

    filtered_repos = df[
        (df['Author'] == 'dependabot') &
        (df['CreatedAt'].notna()) &
        (df['CreatedAt'] < limit_date)
    ]

    total_repos = df['RepositoryId'].nunique()
    percent = (filtered_repos['RepositoryId'].nunique() / total_repos) * 100

    # Generate pie chart
    labels = ['Old Dependabot PRs', 'Other PRs']
    sizes = [percent, 100 - percent]
    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    plt.title("Proportion of Repositories with Older Dependabot PRs (More than 120 days)")
    plt.show()

    return percent


def percent_dependabot_prs_merged(df):
    """Percentage of PRs generated by Dependabot that were merged into the main codebase"""
    dependabot_prs = df[df['Author'] == 'dependabot']

    total_dependabot_prs = len(dependabot_prs)

    if total_dependabot_prs == 0:
        return 0.0

    merged_dependabot_prs = dependabot_prs[dependabot_prs['State'] == 'MERGED']

    percent = (len(merged_dependabot_prs) / total_dependabot_prs) * 100

    # Generate pie chart
    labels = ['Merged Dependabot PRs', 'Not Merged']
    sizes = [percent, 100 - percent]
    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    plt.title("Acceptance Rate of Dependabot PRs - Merged PRs")
    plt.show()

    return percent


def percent_dependabot_prs_closed_no_merge(df):
    """Percentage of PRs generated by Dependabot that were closed without being merged"""
    dependabot_prs = df[df['Author'] == 'dependabot']

    total_dependabot_prs = len(dependabot_prs)

    if total_dependabot_prs == 0:
        return 0.0

    closed_dependabot_prs = dependabot_prs[dependabot_prs['State'] == 'CLOSED']

    percent = (len(closed_dependabot_prs) / total_dependabot_prs) * 100

    # Generate pie chart
    labels = ['Closed without Merging', 'Merged or Open']
    sizes = [percent, 100 - percent]
    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    plt.title("Acceptance Rate of Dependabot PRs - Closed without Merging")
    plt.show()

    return percent


def mean_vulnerabilities_per_language(df):
    """Mean number of vulnerabilities identified by Dependabot per programming language"""
    dependabot_prs = df[df['Author'] == 'dependabot']
    vulnerabilities_per_language = dependabot_prs.groupby('PrimaryLanguage')['RepositoryId'].count()

    # Generate box plot
    plt.figure(figsize=(8, 6))
    vulnerabilities_per_language.plot(kind='box')
    plt.title("Mean Vulnerabilities per Language Detected by Dependabot")
    plt.ylabel("Number of Vulnerabilities")
    plt.show()

    return vulnerabilities_per_language.mean()


def outlier_languages_by_vulnerabilities(df):
    """Programming languages that are outliers in terms of detected vulnerabilities"""
    dependabot_prs = df[df['Author'] == 'dependabot']
    vulnerabilities_per_language = dependabot_prs.groupby('PrimaryLanguage')['RepositoryId'].count()

    Q1 = vulnerabilities_per_language.quantile(0.25)
    Q3 = vulnerabilities_per_language.quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = vulnerabilities_per_language[
        (vulnerabilities_per_language < lower_bound) | (vulnerabilities_per_language > upper_bound)
    ]

    # Generate box plot
    plt.figure(figsize=(8, 6))
    vulnerabilities_per_language.plot(kind='box')
    plt.scatter(outliers.index, outliers, color='red', label='Outliers')
    plt.title("Outlier Vulnerabilities by Language")
    plt.ylabel("Number of Vulnerabilities")
    plt.legend()
    plt.show()

    return [f"{lang}: {count}" for lang, count in outliers.items()]


def count_outlier_languages_by_vulnerabilities(df):
    """Count of programming languages that are outliers in terms of detected vulnerabilities"""
    dependabot_prs = df[df['Author'] == 'dependabot']
    vulnerabilities_per_language = dependabot_prs.groupby('PrimaryLanguage')['RepositoryId'].count()

    Q1 = vulnerabilities_per_language.quantile(0.25)
    Q3 = vulnerabilities_per_language.quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = vulnerabilities_per_language[
        (vulnerabilities_per_language < lower_bound) | (vulnerabilities_per_language > upper_bound)
    ]

    # Generate box plot
    plt.figure(figsize=(8, 6))
    vulnerabilities_per_language.plot(kind='box')
    plt.scatter(outliers.index, outliers, color='red', label='Outliers')
    plt.title("Count of Outlier Vulnerabilities by Language")
    plt.ylabel("Number of Vulnerabilities")
    plt.legend()
    plt.show()

    return len(outliers)

def process_metrics(dataset_path):
    df = pd.read_csv(dataset_path)
    df = convert_datetime_columns(df)

    metrics = {
        "Metric": [
            "Percentage of analysed repositories that have at least 1 PR generated by Dependabot in the last 120 days",
            "Percentage of repositories that have at least 1 PR by Dependabot but no new PR in the last 120 days",
            "Percentage of PRs generated by Dependabot that were merged into the main codebase",
            "Percentage of PRs generated by Dependabot that were closed without being merged",
            "Mean number of vulnerabilities identified by Dependabot per programming language",
            "Programming languages that are outliers in terms of detected vulnerabilities",
            "Count of programming languages that are outliers in terms of detected vulnerabilities"
        ],
        "Value": [
            percent_recent_dependabot_prs(df),
            percent_old_dependabot_prs(df),
            percent_dependabot_prs_merged(df),
            percent_dependabot_prs_closed_no_merge(df),
            mean_vulnerabilities_per_language(df),
            outlier_languages_by_vulnerabilities(df),
            count_outlier_languages_by_vulnerabilities(df)
        ]
    }

    metrics_df = pd.DataFrame(metrics)

    current_date = datetime.now().strftime("%d-%m-%Y")
    csv_file_name = f'/tmp/metrics-{current_date}.csv'

    metrics_df.to_csv(csv_file_name, index=False)
    return csv_file_name

